<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.cqgcxy.mapper.AnnexMapper">
  <resultMap id="BaseResultMap" type="edu.cqgcxy.model.Annex">
    <id column="annexID" jdbcType="INTEGER" property="annexid" />
    <result column="annexName" jdbcType="VARCHAR" property="annexname" />
    <result column="annexAddr" jdbcType="VARCHAR" property="annexaddr" />
    <result column="annexSign" jdbcType="VARCHAR" property="annexsign" />
    <result column="size" jdbcType="INTEGER" property="size" />
    <result column="big" jdbcType="VARCHAR" property="big" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    annexID, annexName, annexAddr, annexSign, size, big
  </sql>
  <select id="selectByExample" parameterType="edu.cqgcxy.model.AnnexExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from annex
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from annex
    where annexID = #{annexid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from annex
    where annexID = #{annexid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="edu.cqgcxy.model.AnnexExample">
    delete from annex
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="edu.cqgcxy.model.Annex">
    <selectKey keyProperty="annexid" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into annex (annexName, annexAddr, annexSign, 
      size, big)
    values (#{annexname,jdbcType=VARCHAR}, #{annexaddr,jdbcType=VARCHAR}, #{annexsign,jdbcType=VARCHAR}, 
      #{size,jdbcType=INTEGER}, #{big,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="edu.cqgcxy.model.Annex">
    <selectKey keyProperty="annexid" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into annex
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="annexname != null">
        annexName,
      </if>
      <if test="annexaddr != null">
        annexAddr,
      </if>
      <if test="annexsign != null">
        annexSign,
      </if>
      <if test="size != null">
        size,
      </if>
      <if test="big != null">
        big,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="annexname != null">
        #{annexname,jdbcType=VARCHAR},
      </if>
      <if test="annexaddr != null">
        #{annexaddr,jdbcType=VARCHAR},
      </if>
      <if test="annexsign != null">
        #{annexsign,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        #{size,jdbcType=INTEGER},
      </if>
      <if test="big != null">
        #{big,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.cqgcxy.model.AnnexExample" resultType="java.lang.Long">
    select count(*) from annex
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update annex
    <set>
      <if test="record.annexid != null">
        annexID = #{record.annexid,jdbcType=INTEGER},
      </if>
      <if test="record.annexname != null">
        annexName = #{record.annexname,jdbcType=VARCHAR},
      </if>
      <if test="record.annexaddr != null">
        annexAddr = #{record.annexaddr,jdbcType=VARCHAR},
      </if>
      <if test="record.annexsign != null">
        annexSign = #{record.annexsign,jdbcType=VARCHAR},
      </if>
      <if test="record.size != null">
        size = #{record.size,jdbcType=INTEGER},
      </if>
      <if test="record.big != null">
        big = #{record.big,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update annex
    set annexID = #{record.annexid,jdbcType=INTEGER},
      annexName = #{record.annexname,jdbcType=VARCHAR},
      annexAddr = #{record.annexaddr,jdbcType=VARCHAR},
      annexSign = #{record.annexsign,jdbcType=VARCHAR},
      size = #{record.size,jdbcType=INTEGER},
      big = #{record.big,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.cqgcxy.model.Annex">
    update annex
    <set>
      <if test="annexname != null">
        annexName = #{annexname,jdbcType=VARCHAR},
      </if>
      <if test="annexaddr != null">
        annexAddr = #{annexaddr,jdbcType=VARCHAR},
      </if>
      <if test="annexsign != null">
        annexSign = #{annexsign,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        size = #{size,jdbcType=INTEGER},
      </if>
      <if test="big != null">
        big = #{big,jdbcType=VARCHAR},
      </if>
    </set>
    where annexID = #{annexid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.cqgcxy.model.Annex">
    update annex
    set annexName = #{annexname,jdbcType=VARCHAR},
      annexAddr = #{annexaddr,jdbcType=VARCHAR},
      annexSign = #{annexsign,jdbcType=VARCHAR},
      size = #{size,jdbcType=INTEGER},
      big = #{big,jdbcType=VARCHAR}
    where annexID = #{annexid,jdbcType=INTEGER}
  </update>
</mapper>